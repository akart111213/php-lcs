var search_data = {
    'index': {
        'searchIndex': ["eloquent","eloquent\\lcs","eloquent\\lcs\\lcssolver","eloquent\\lcs\\lcssolverinterface","eloquent\\lcs\\lcssolver::__construct","eloquent\\lcs\\lcssolver::comparator","eloquent\\lcs\\lcssolver::longestcommonsubsequence","eloquent\\lcs\\lcssolverinterface::longestcommonsubsequence"],
        'info': [["Eloquent","","Eloquent.html","","",3],["Eloquent\\Lcs","","Eloquent\/Lcs.html","","",3],["LcsSolver","Eloquent\\Lcs","Eloquent\/Lcs\/LcsSolver.html","","Solves longest common subsequence problems.",1],["LcsSolverInterface","Eloquent\\Lcs","Eloquent\/Lcs\/LcsSolverInterface.html","","The interface implemented by longest common subsequence",1],["LcsSolver::__construct","Eloquent\\Lcs\\LcsSolver","Eloquent\/Lcs\/LcsSolver.html#method___construct","(<abbr title=\"Eloquent\\Lcs\\callable\">callable<\/abbr>|null $comparator = null)","Construct a new LCS solver.",2],["LcsSolver::comparator","Eloquent\\Lcs\\LcsSolver","Eloquent\/Lcs\/LcsSolver.html#method_comparator","()","Get the comparator.",2],["LcsSolver::longestCommonSubsequence","Eloquent\\Lcs\\LcsSolver","Eloquent\/Lcs\/LcsSolver.html#method_longestCommonSubsequence","(array $sequenceA, array $sequenceB)","Returns the longest common subsequence of the given",2],["LcsSolverInterface::longestCommonSubsequence","Eloquent\\Lcs\\LcsSolverInterface","Eloquent\/Lcs\/LcsSolverInterface.html#method_longestCommonSubsequence","(array $sequenceA, array $sequenceB)","Returns the longest common subsequence of the given",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']